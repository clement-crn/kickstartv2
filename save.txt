import React, { Component } from "react";
import { ethers } from "ethers";

import Layout from "@/components/Layout";
import { main_abi } from "../../../backend/abis";

class CampaignShow extends Component {
    static async getInitialProps({ query }) {
        const DEPLOYED_CONTRACT_ADDRESS =
            "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
        //addresse Campaign_contract
        const provider = new ethers.providers.JsonRpcProvider();
        const signer = provider.getSigner();

        const Campaign = new ethers.Contract(
            DEPLOYED_CONTRACT_ADDRESS,
            main_abi,
            signer
        );

        const campaign = Campaign(query.address);

        const summary = await campaign.getSummary().call();

        return {
            address: query.address,
            minimumContribution: summary[0].toString(),
            balance: summary[1].toString(),
            requestsCount: summary[2].toString(),
            approversCount: summary[3].toString(),
            manager: summary[4],
        };
    }

    renderCards() {
        const {
            balance,
            manager,
            minimumContribution,
            requestsCount,
            approversCount,
        } = this.props;

        const items = [
            {
                header: manager,
                meta: "Address of Manager",
                description:
                    "The manager created this campaign and can create requests to withdraw money",
                style: { overflowWrap: "break-word" },
            },
            {
                header: minimumContribution,
                meta: "Minimum Contribution (wei)",
                description:
                    "You must contribute at least this much wei to become an approver",
            },
            {
                header: requestsCount,
                meta: "Number of Requests",
                description:
                    "A request tries to withdraw money from the contract. Requests must be approved by approvers",
            },
            {
                header: approversCount,
                meta: "Number of Approvers",
                description:
                    "Number of people who have already donated to this campaign",
            },
            {
                header: ethers.utils.formatEther(balance),
                meta: "Campaign Balance (ether)",
                description:
                    "The balance is how much money this campaign has left to spend.",
            },
        ];

        return <Card.Group items={items} />;
    }

    render() {
        return (
            <Layout>
                <h3>Campaign Show</h3>
                <Grid>
                    <Grid.Row>
                        <Grid.Column width={10}>
                            {this.renderCards()}
                        </Grid.Column>

                        <Grid.Column width={6}>
                            <ContributeForm address={this.props.address} />
                        </Grid.Column>
                    </Grid.Row>

                    <Grid.Row>
                        <Grid.Column>
                            <Link
                                route={`/campaigns/${this.props.address}/requests`}
                            >
                                <a>
                                    <Button primary>View Requests</Button>
                                </a>
                            </Link>
                        </Grid.Column>
                    </Grid.Row>
                </Grid>
            </Layout>
        );
    }
}

export default CampaignShow;